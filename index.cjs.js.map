{"version":3,"file":"index.cjs.js","sources":["src/lib/clone-rule.js","src/lib/clone-rule-specificity.js","src/lib/transform-border.js","src/lib/transform-border-radius.js","src/lib/reduce-values.js","src/lib/transform-directional-shorthands.js","src/lib/transform-float.js","src/lib/transform-inset.js","src/lib/transform-resize.js","src/lib/match-side.js","src/lib/match-inset-prefix.js","src/lib/clone-decl.js","src/lib/transform-side.js","src/lib/match-size.js","src/lib/transform-size.js","src/lib/transform-text-align.js","src/lib/split.js","src/lib/transform-transition.js","src/index.js"],"sourcesContent":["import postcss from 'postcss';\n\nexport default (decl, dir) => {\n\tconst rule = Object(decl.parent).type === 'rule' ? decl.parent.cloneBefore({\n\t\traws: {}\n\t}).removeAll() : postcss.rule({ selector: '&' });\n\n\trule.assign({'selectors': rule.selectors.map(selector => `${selector}:dir(${dir})`)})\n\n\treturn rule;\n};\n","import postcss from 'postcss';\n\nexport default (decl) => {\n\tconst rule = Object(decl.parent).type === 'rule' ? decl.parent.cloneBefore({\n\t\traws: {}\n\t}).removeAll() : postcss.rule({ selector: '&' });\n\n\trule.assign({'selectors': rule.selectors.map(selector => `[dir] ${selector}`)})\n\n\treturn rule;\n};\n","import cloneRule from './clone-rule';\nimport cloneRuleSpecificity from './clone-rule-specificity';\n\nconst matchLogicalBorderSide = /^border-(block|block-start|block-end|inline|inline-start|inline-end)(-(width|style|color))?$/i;\n\nexport default {\n\t// border-block\n\t'border-block': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\tvalue: values[0]\n\t\t});\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\tvalue: values[1] || values[0]\n\t\t});\n\t\tclean(decl, preserve);\n\t},\n\n\t// border-block-start\n\t'border-block-start': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t});\n\t\tclean(decl, preserve);\n\t},\n\n\t// border-block-end\n\t'border-block-end': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t});\n\t\tclean(decl, preserve);\n\t},\n\n\t// border-inline\n\t'border-inline': (decl, values, dir, preserve) => {\n\t\tconst ltrDecls = () => {\n\t\t\treturn [\n\t\t\t\tdecl.cloneBefore({\n\t\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[0]\n\t\t\t\t}),\n\t\t\t\tdecl.cloneBefore({\n\t\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[1] || values[0]\n\t\t\t\t})\n\t\t\t];\n\t\t};\n\n\t\tconst rtlDecls = () => {\n\t\t\treturn [\n\t\t\t\tdecl.clone({\n\t\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[0]\n\t\t\t\t}),\n\t\t\t\tdecl.clone({\n\t\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[1] || values[0]\n\t\t\t\t})\n\t\t\t];\n\t\t};\n\n\t\tconst isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n\t\tif (isLTR) {\n\t\t\tcloneRuleSpecificity(decl).append(ltrDecls());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'ltr') {\n\t\t\tltrDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// border-inline-start\n\t'border-inline-start': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tconst rtlDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// border-inline-end\n\t'border-inline-end': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tconst rtlDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n};\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","import cloneRule from './clone-rule';\n\nconst logicalRadii = /^(border-)(end-end|end-start|start-end|start-start)(-radius)$/i;\nconst ltrRadii = { 'end-end': 'bottom-right', 'end-start': 'bottom-left', 'start-end': 'top-right', 'start-start': 'top-left' };\nconst rtlRadii = { 'end-end': 'bottom-left', 'end-start': 'bottom-right', 'start-end': 'top-left', 'start-start': 'top-right' };\n\nexport default (decl, values, dir, preserve) => {\n\tif (dir === 'ltr') {\n\t\tlDecl(decl);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tif (dir === 'rtl') {\n\t\trDecl(decl);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tcloneRule(decl, 'ltr').append(lDecl(decl));\n\tcloneRule(decl, 'rtl').append(rDecl(decl));\n\tclean(decl, preserve);\n};\n\nfunction lDecl(decl) {\n\treturn decl.cloneBefore({\n\t\tprop: decl.prop.replace(logicalRadii, ($, prefix, direction, suffix) => `${prefix}${ltrRadii[direction]}${suffix}`)\n\t});\n}\n\nfunction rDecl(decl) {\n\treturn decl.cloneBefore({\n\t\tprop: decl.prop.replace(logicalRadii, ($, prefix, direction, suffix) => `${prefix}${rtlRadii[direction]}${suffix}`)\n\t});\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default values => {\n\tconst reducedValues = values.slice();\n\n\t// reduce [A, B, C, B] to [A, B, C]\n\tif (reducedValues.length === 4 && reducedValues[3] === reducedValues[1]) {\n\t\treducedValues.pop();\n\t}\n\n\t// reduce [A, B, A] to [A, B]\n\tif (reducedValues.length === 3 && reducedValues[2] === reducedValues[0]) {\n\t\treducedValues.pop();\n\t}\n\n\t// reduce [A, A] to [A]\n\tif (reducedValues.length === 2 && reducedValues[1] === reducedValues[0]) {\n\t\treducedValues.pop();\n\t}\n\n\treturn reducedValues;\n};\n","import cloneRule from './clone-rule';\nimport cloneRuleSpecificity from './clone-rule-specificity';\nimport reduceValues from './reduce-values';\n\nexport default (decl, values, dir, preserve) => {\n\tif ('logical' !== values[0]) {\n\t\treturn null;\n\t}\n\n\t// get logical directions as all, inline, block-end, then inline-end\n\tconst [, all, inline, blockEnd, inlineEnd ] = values;\n\n\t// get left-to-right relative directions from logical directions as:\n\t// → top from all\n\t// → right from inline-end, inline, or all\n\t// → bottom from block-end, block, or all\n\t// → left from inline, or all\n\tconst ltrValues = reduceValues([\n\t\tall,\n\t\tinlineEnd || inline || all,\n\t\tblockEnd || all,\n\t\tinline || all\n\t]);\n\n\tconst ltrDecl = () => {\n\t\treturn decl.cloneBefore({\n\t\t\tvalue: ltrValues.join(' ')\n\t\t});\n\t};\n\n\t// return the ltr values if the values are flow agnostic (where no second inline value was needed)\n\tconst isFlowAgnostic = ltrValues.length < 4;\n\n\tif (isFlowAgnostic) {\n\t\tcloneRuleSpecificity(decl).append(ltrDecl());\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tif (dir === 'ltr') {\n\t\tltrDecl();\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\t// get right-to-left relative directions from logical directions as:\n\t// → top from all\n\t// → right from inline, or all\n\t// → bottom from block-end, block, or all\n\t// → left from inline-end, inline, or all\n\tconst rtlValues = reduceValues([\n\t\tall,\n\t\tinline || all,\n\t\tblockEnd || all,\n\t\tinlineEnd || inline || all\n\t]);\n\n\tconst rtlDecl = () => {\n\t\treturn decl.cloneBefore({\n\t\t\tvalue: rtlValues.join(' ')\n\t\t});\n\t};\n\n\tif (dir === 'rtl') {\n\t\trtlDecl();\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tcloneRule(decl, 'ltr').append(ltrDecl());\n\tcloneRule(decl, 'rtl').append(rtlDecl());\n\tclean(decl, preserve);\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir, preserve) => {\n\tif (/^inline-start$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(lDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(rDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t} if (/^inline-end$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(rDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(lDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n};\n\nfunction lDecl(decl) {\n\treturn decl.cloneBefore({ value: 'left' });\n}\n\nfunction rDecl(decl) {\n\treturn decl.cloneBefore({ value: 'right' });\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","import cloneRule from './clone-rule';\nimport cloneRuleSpecificity from './clone-rule-specificity';\n\nexport default (decl, values, dir, preserve) => {\n\tif ('logical' !== values[0]) {\n\t\tdecl.cloneBefore({ prop: 'top', value: values[0] });\n\t\tdecl.cloneBefore({ prop: 'right', value: values[1] || values[0] });\n\t\tdecl.cloneBefore({ prop: 'bottom', value: values[2] || values[0] });\n\t\tdecl.cloneBefore({ prop: 'left', value: values[3] || values[1] || values[0] });\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tconst isLTR = !values[4] || values[4] === values[2];\n\n\tif (isLTR) {\n\t\tcloneRuleSpecificity(decl).append(lDecl(decl, values));\n\t\tclean(decl, preserve);\n\t\treturn;\n\t} else if (dir === 'ltr') {\n\t\tlDecl(decl, values);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t} else if (dir === 'rtl') {\n\t\trDecl(decl, values);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t} else {\n\t\tcloneRule(decl, 'ltr').append(lDecl(decl, values));\n\t\tcloneRule(decl, 'rtl').append(rDecl(decl, values));\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n}\n\nfunction lDecl(decl, values) {\n\treturn [\n\t\tdecl.cloneBefore({ prop: 'top', value: values[1] }),\n\t\tdecl.cloneBefore({ prop: 'left', value: values[2] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'bottom', value: values[3] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'right', value: values[4] || values[2] || values[1] })\n\t];\n}\n\nfunction rDecl(decl, values) {\n\treturn [\n\t\tdecl.cloneBefore({ prop: 'top', value: values[1] }),\n\t\tdecl.cloneBefore({ prop: 'right', value: values[2] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'bottom', value: values[3] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'left', value: values[4] || values[2] || values[1] })\n\t];\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default (decl, values, dir, preserve) => {\n\tif (/^block$/i.test(decl.value)) {\n\t\tdecl.cloneBefore({ value: 'vertical' });\n\t\tclean(decl, preserve);\n\t\treturn;\n\t} else if (/^inline$/i.test(decl.value)) {\n\t\tdecl.cloneBefore({ value: 'horizontal' });\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default /^(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))$/i;\n","export default /^inset-/i;\n","import matchSide from './match-side';\nimport matchInsetPrefix from './match-inset-prefix';\n\nexport default (decl, suffix, value) => decl.cloneBefore({\n\tprop: `${decl.prop.replace(matchSide, '$1')}${suffix}`.replace(matchInsetPrefix, ''),\n\tvalue\n});\n","import cloneDeclBefore from './clone-decl';\nimport cloneRule from './clone-rule';\nimport cloneRuleSpecificity from './clone-rule-specificity';\nimport matchSide from './match-side';\n\nimport matchInsetPrefix from './match-inset-prefix';\n\nexport default {\n\t// inset-block, margin-block, padding-block\n\t'block': (decl, values, dir, preserve) => {\n\t\tcloneDeclBefore(decl, '-top', values[0]);\n\t\tcloneDeclBefore(decl, '-bottom', values[1] || values[0]);\n\t\tclean(decl, preserve);\n\t},\n\n\t// inset-block-start, margin-block-start, padding-block-start\n\t'block-start': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({ prop: decl.prop.replace(matchSide, '$1-top').replace(matchInsetPrefix, '') });\n\t\tclean(decl, preserve);\n\t},\n\n\t// inset-block-end, margin-block-end, padding-block-end\n\t'block-end': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({ prop: decl.prop.replace(matchSide, '$1-bottom').replace(matchInsetPrefix, '') });\n\t\tclean(decl, preserve);\n\t},\n\n\t// inset-inline, margin-inline, padding-inline\n\t'inline': (decl, values, dir, preserve) => {\n\t\tconst ltrDecls = () => {\n\t\t\treturn [\n\t\t\t\tcloneDeclBefore(decl, '-left', values[0]),\n\t\t\t\tcloneDeclBefore(decl, '-right', values[1] || values[0])\n\t\t\t];\n\t\t};\n\n\t\tconst rtlDecls = () => {\n\t\t\treturn [\n\t\t\t\tcloneDeclBefore(decl, '-right', values[0]),\n\t\t\t\tcloneDeclBefore(decl, '-left', values[1] || values[0])\n\t\t\t];\n\t\t};\n\n\t\tconst isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n\n\t\tif (isLTR) {\n\t\t\tcloneRuleSpecificity(decl).append(ltrDecls());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'ltr') {\n\t\t\tltrDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// inset-inline-start, margin-inline-start, padding-inline-start\n\t'inline-start': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-left', decl.value);\n\t\t};\n\t\tconst rtlDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-right', decl.value);\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// inset-inline-end, margin-inline-end, padding-inline-end\n\t'inline-end': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-right', decl.value);\n\t\t};\n\t\tconst rtlDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-left', decl.value);\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default /^(min-|max-)?(block|inline)-(size)$/i;\n","import matchSize from './match-size';\n\nexport default (decl, values, dir, preserve) => {\n\tdecl.cloneBefore({\n\t\tprop: decl.prop.replace(\n\t\t\tmatchSize,\n\t\t\t($0, minmax, flow) => `${minmax || ''}${'block' === flow ? 'height' : 'width'}`\n\t\t)\n\t});\n\n\tif (!preserve) {\n\t\tdecl.remove();\n\t}\n}\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir, preserve) => {\n\tif (/^start$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(lDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(rDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t} else if (/^end$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(rDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(lDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n};\n\nfunction lDecl(decl) {\n\treturn decl.cloneBefore({ value: 'left' });\n}\n\nfunction rDecl(decl) {\n\treturn decl.cloneBefore({ value: 'right' });\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export function splitByComma(string, isTrimmed) {\n\treturn splitByRegExp(string, /^,$/, isTrimmed);\n}\n\nexport function splitBySpace(string, isTrimmed) {\n\treturn splitByRegExp(string, /^\\s$/, isTrimmed);\n}\n\nexport function splitBySlash(string, isTrimmed) {\n\treturn splitByRegExp(string, /^\\/$/, isTrimmed);\n}\n\nfunction splitByRegExp(string, re, isTrimmed) {\n\tconst array = [];\n\tlet buffer = '';\n\tlet split = false;\n\tlet func = 0;\n\tlet i = -1;\n\n\twhile (++i < string.length) {\n\t\tconst char = string[i];\n\n\t\tif (char === '(') {\n\t\t\tfunc += 1;\n\t\t} else if (char === ')') {\n\t\t\tif (func > 0) {\n\t\t\t\tfunc -= 1;\n\t\t\t}\n\t\t} else if (func === 0) {\n\t\t\tif (re.test(char)) {\n\t\t\t\tsplit = true;\n\t\t\t}\n\t\t}\n\n\t\tif (split) {\n\t\t\tif (!isTrimmed || buffer.trim()) {\n\t\t\t\tarray.push(isTrimmed ? buffer.trim() : buffer);\n\t\t\t}\n\n\t\t\tif (!isTrimmed) {\n\t\t\t\tarray.push(char);\n\t\t\t}\n\n\t\t\tbuffer = '';\n\t\t\tsplit = false;\n\t\t} else {\n\t\t\tbuffer += char\n\t\t}\n\t}\n\n\tif (buffer !== '') {\n\t\tarray.push(isTrimmed ? buffer.trim() : buffer);\n\t}\n\n\treturn array;\n}\n","import cloneRule from './clone-rule';\nimport { splitByComma, splitBySpace } from './split';\n\nexport default (decl, notValues, dir, preserve) => {\n\tconst ltrValues = [];\n\tconst rtlValues = [];\n\n\tsplitByComma(decl.value).forEach(value => {\n\t\tlet hasBeenSplit = false;\n\n\t\tsplitBySpace(value).forEach((word, index, words) => {\n\t\t\tif (word in valueMap) {\n\t\t\t\thasBeenSplit = true;\n\n\t\t\t\tvalueMap[word].ltr.forEach(replacement => {\n\t\t\t\t\tconst clone = words.slice();\n\n\t\t\t\t\tclone.splice(index, 1, replacement);\n\n\t\t\t\t\tif (ltrValues.length && !/^,$/.test(ltrValues[ltrValues.length - 1])) {\n\t\t\t\t\t\tltrValues.push(',');\n\t\t\t\t\t}\n\n\t\t\t\t\tltrValues.push(clone.join(''));\n\t\t\t\t});\n\n\t\t\t\tvalueMap[word].rtl.forEach(replacement => {\n\t\t\t\t\tconst clone = words.slice();\n\n\t\t\t\t\tclone.splice(index, 1, replacement);\n\n\t\t\t\t\tif (rtlValues.length && !/^,$/.test(rtlValues[rtlValues.length - 1])) {\n\t\t\t\t\t\trtlValues.push(',');\n\t\t\t\t\t}\n\n\t\t\t\t\trtlValues.push(clone.join(''));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (!hasBeenSplit) {\n\t\t\tltrValues.push(value);\n\t\t\trtlValues.push(value);\n\t\t}\n\t});\n\n\tif (ltrValues.length && dir === 'ltr') {\n\t\tif (preserve) {\n\t\t\tdecl.cloneBefore({});\n\t\t}\n\t\tdecl.assign({ value: ltrValues.join('') });\n\t\treturn;\n\t} else if (rtlValues.length && dir === 'rtl') {\n\t\tif (preserve) {\n\t\t\tdecl.cloneBefore({});\n\t\t}\n\t\tdecl.assign({ value: rtlValues.join('') });\n\t\treturn;\n\t} else if (ltrValues.join('') !== rtlValues.join('')) {\n\n\t\tcloneRule(decl, 'ltr').append(decl.cloneBefore({ value: ltrValues.join('') }));\n\t\tcloneRule(decl, 'rtl').append(decl.cloneBefore({ value: rtlValues.join('') }));\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n};\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n\nconst valueMap = {\n\t// Logical Height and Logical Width\n\t'block-size': { ltr: ['height'], rtl: ['height'] },\n\t'inline-size': { ltr: ['width'], rtl: ['width'] },\n\n\t// Flow-relative Margins\n\t'margin-block-end': { ltr: ['margin-bottom'], rtl: ['margin-bottom'] },\n\t'margin-block-start': { ltr: ['margin-top'], rtl: ['margin-top'] },\n\t'margin-block': { ltr: ['margin-top', 'margin-bottom'], rtl: ['margin-top', 'margin-bottom'] },\n\t'margin-inline-end': { ltr: ['margin-right'], rtl: ['margin-left'] },\n\t'margin-inline-start': { ltr: ['margin-left'], rtl: ['margin-right'] },\n\t'margin-inline': { ltr: ['margin-left', 'margin-right'], rtl: ['margin-left', 'margin-right'] },\n\n\t// Flow-relative Offsets\n\t'inset-block-end': { ltr: ['bottom'], rtl: ['bottom'] },\n\t'inset-block-start': { ltr: ['top'], rtl: ['top'] },\n\t'inset-block': { ltr: ['top', 'bottom'], rtl: ['top', 'bottom'] },\n\t'inset-inline-end': { ltr: ['right'], rtl: ['left'] },\n\t'inset-inline-start': { ltr: ['left'], rtl: ['right'] },\n\t'inset-inline': { ltr: ['left', 'right'], rtl: ['left', 'right'] },\n\t'inset': { ltr: ['top', 'right', 'bottom', 'left'], rtl: ['top', 'right', 'bottom', 'left'] },\n\n\t// Flow-relative Padding\n\t'padding-block-end': { ltr: ['padding-bottom'], rtl: ['padding-bottom'] },\n\t'padding-block-start': { ltr: ['padding-top'], rtl: ['padding-top'] },\n\t'padding-block': { ltr: ['padding-top', 'padding-bottom'], rtl: ['padding-top', 'padding-bottom'] },\n\t'padding-inline-end': { ltr: ['padding-right'], rtl: ['padding-left'] },\n\t'padding-inline-start': { ltr: ['padding-left'], rtl: ['padding-right'] },\n\t'padding-inline': { ltr: ['padding-left', 'padding-right'], rtl: ['padding-left', 'padding-right'] },\n\n\t// Flow-relative Borders\n\t'border-block-color': { ltr: ['border-top-color', 'border-bottom-color'], rtl: ['border-top-color', 'border-bottom-color'] },\n\t'border-block-end-color': { ltr: ['border-bottom-color'], rtl: ['border-bottom-color'] },\n\t'border-block-end-style': { ltr: ['border-bottom-style'], rtl: ['border-bottom-style'] },\n\t'border-block-end-width': { ltr: ['border-bottom-width'], rtl: ['border-bottom-width'] },\n\t'border-block-end': { ltr: ['border-bottom'], rtl: ['border-bottom'] },\n\t'border-block-start-color': { ltr: ['border-top-color'], rtl: ['border-top-color'] },\n\t'border-block-start-style': { ltr: ['border-top-style'], rtl: ['border-top-style'] },\n\t'border-block-start-width': { ltr: ['border-top-width'], rtl: ['border-top-width'] },\n\t'border-block-start': { ltr: ['border-top'], rtl: ['border-top'] },\n\t'border-block-style': { ltr: ['border-top-style', 'border-bottom-style'], rtl: ['border-top-style', 'border-bottom-style'] },\n\t'border-block-width': { ltr: ['border-top-width', 'border-bottom-width'], rtl: ['border-top-width', 'border-bottom-width'] },\n\t'border-block': { ltr: ['border-top', 'border-bottom'], rtl: ['border-top', 'border-bottom'] },\n\t'border-inline-color': { ltr: ['border-left-color', 'border-right-color'], rtl: ['border-left-color', 'border-right-color'] },\n\t'border-inline-end-color': { ltr: ['border-right-color'], rtl: ['border-left-color'] },\n\t'border-inline-end-style': { ltr: ['border-right-style'], rtl: ['border-left-style'] },\n\t'border-inline-end-width': { ltr: ['border-right-width'], rtl: ['border-left-width'] },\n\t'border-inline-end': { ltr: ['border-right'], rtl: ['border-left'] },\n\t'border-inline-start-color': { ltr: ['border-left-color'], rtl: ['border-right-color'] },\n\t'border-inline-start-style': { ltr: ['border-left-style'], rtl: ['border-right-style'] },\n\t'border-inline-start-width': { ltr: ['border-left-width'], rtl: ['border-right-width'] },\n\t'border-inline-start': { ltr: ['border-left'], rtl: ['border-right'] },\n\t'border-inline-style': { ltr: ['border-left-style', 'border-right-style'], rtl: ['border-left-style', 'border-right-style'] },\n\t'border-inline-width': { ltr: ['border-left-width', 'border-right-width'], rtl: ['border-left-width', 'border-right-width'] },\n\t'border-inline': { ltr: ['border-left', 'border-right'], rtl: ['border-left', 'border-right'] },\n\n\t// Flow-relative Corner Rounding\n\t'border-end-end-radius': { ltr: ['border-bottom-right-radius'], rtl: ['border-bottom-left-radius'] },\n\t'border-end-start-radius': { ltr: ['border-bottom-left-radius'], rtl: ['border-bottom-right-radius'] },\n\t'border-start-end-radius': { ltr: ['border-top-right-radius'], rtl: ['border-top-left-radius'] },\n\t'border-start-start-radius': { ltr: ['border-top-left-radius'], rtl: ['border-top-right-radius'] }\n};\n","import transformBorder from './lib/transform-border';\nimport transformBorderRadius from './lib/transform-border-radius';\nimport transformDirectionalShorthands from './lib/transform-directional-shorthands';\nimport transformFloat from './lib/transform-float';\nimport transformInset from './lib/transform-inset';\nimport transformResize from './lib/transform-resize';\nimport transformSide from './lib/transform-side';\nimport transformSize from './lib/transform-size';\nimport transformTextAlign from './lib/transform-text-align';\nimport transformTransition from './lib/transform-transition';\nimport { splitBySpace } from './lib/split';\n\n// plugin\nfunction postcssLogicalProperties(opts) {\n\topts = Object(opts);\n\n\tconst preserve = Boolean(opts.preserve);\n\tconst dir = !preserve && typeof opts.dir === 'string'\n\t\t? /^rtl$/i.test(opts.dir)\n\t\t\t? 'rtl'\n\t\t\t: 'ltr'\n\t\t: false;\n\n\tconst makeTransform = (transform) => {\n\t\treturn (decl) => {\n\t\t\tconst parent = decl.parent;\n\t\t\tconst values = splitBySpace(decl.value, true);\n\t\t\ttransform(decl, values, dir, preserve);\n\t\t\tif (!parent.nodes.length) {\n\t\t\t\tparent.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\tconst makeTransformWithoutSplittingValues = (transform) => {\n\t\treturn (decl) => {\n\t\t\tconst parent = decl.parent;\n\t\t\tconst values = [decl.value];\n\t\t\ttransform(decl, values, dir, preserve);\n\t\t\tif (!parent.nodes.length) {\n\t\t\t\tparent.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-logical-properties',\n\t\tDeclaration: {\n\t\t\t// Flow-Relative Values\n\t\t\t'clear': makeTransform(transformFloat),\n\t\t\t'float': makeTransform(transformFloat),\n\t\t\t'resize': makeTransform(transformResize),\n\t\t\t'text-align': makeTransform(transformTextAlign),\n\n\t\t\t// Logical Height and Logical Width\n\t\t\t'block-size': makeTransform(transformSize),\n\t\t\t'max-block-size': makeTransform(transformSize),\n\t\t\t'min-block-size': makeTransform(transformSize),\n\t\t\t'inline-size': makeTransform(transformSize),\n\t\t\t'max-inline-size': makeTransform(transformSize),\n\t\t\t'min-inline-size': makeTransform(transformSize),\n\n\t\t\t// Flow-relative Margins\n\t\t\t'margin': makeTransform(transformDirectionalShorthands),\n\t\t\t'margin-inline': makeTransform(transformSide['inline']),\n\t\t\t'margin-inline-end': makeTransform(transformSide['inline-end']),\n\t\t\t'margin-inline-start': makeTransform(transformSide['inline-start']),\n\t\t\t'margin-block': makeTransform(transformSide['block']),\n\t\t\t'margin-block-end': makeTransform(transformSide['block-end']),\n\t\t\t'margin-block-start': makeTransform(transformSide['block-start']),\n\n\t\t\t// Flow-relative Offsets\n\t\t\t'inset': makeTransform(transformInset),\n\t\t\t'inset-inline': makeTransform(transformSide['inline']),\n\t\t\t'inset-inline-end': makeTransform(transformSide['inline-end']),\n\t\t\t'inset-inline-start': makeTransform(transformSide['inline-start']),\n\t\t\t'inset-block': makeTransform(transformSide['block']),\n\t\t\t'inset-block-end': makeTransform(transformSide['block-end']),\n\t\t\t'inset-block-start': makeTransform(transformSide['block-start']),\n\n\t\t\t// Flow-relative Padding\n\t\t\t'padding': makeTransform(transformDirectionalShorthands),\n\t\t\t'padding-inline': makeTransform(transformSide['inline']),\n\t\t\t'padding-inline-end': makeTransform(transformSide['inline-end']),\n\t\t\t'padding-inline-start': makeTransform(transformSide['inline-start']),\n\t\t\t'padding-block': makeTransform(transformSide['block']),\n\t\t\t'padding-block-end': makeTransform(transformSide['block-end']),\n\t\t\t'padding-block-start': makeTransform(transformSide['block-start']),\n\n\t\t\t// Flow-relative Borders\n\t\t\t'border-block': makeTransformWithoutSplittingValues(transformBorder['border-block']),\n\t\t\t'border-block-color': makeTransform(transformBorder['border-block']),\n\t\t\t'border-block-style': makeTransform(transformBorder['border-block']),\n\t\t\t'border-block-width': makeTransform(transformBorder['border-block']),\n\t\t\t'border-block-end': makeTransformWithoutSplittingValues(transformBorder['border-block-end']),\n\t\t\t'border-block-end-color': makeTransform(transformBorder['border-block-end']),\n\t\t\t'border-block-end-style': makeTransform(transformBorder['border-block-end']),\n\t\t\t'border-block-end-width': makeTransform(transformBorder['border-block-end']),\n\t\t\t'border-block-start': makeTransformWithoutSplittingValues(transformBorder['border-block-start']),\n\t\t\t'border-block-start-color': makeTransform(transformBorder['border-block-start']),\n\t\t\t'border-block-start-style': makeTransform(transformBorder['border-block-start']),\n\t\t\t'border-block-start-width': makeTransform(transformBorder['border-block-start']),\n\t\t\t'border-inline': makeTransformWithoutSplittingValues(transformBorder['border-inline']),\n\t\t\t'border-inline-color': makeTransform(transformBorder['border-inline']),\n\t\t\t'border-inline-style': makeTransform(transformBorder['border-inline']),\n\t\t\t'border-inline-width': makeTransform(transformBorder['border-inline']),\n\t\t\t'border-inline-end': makeTransformWithoutSplittingValues(transformBorder['border-inline-end']),\n\t\t\t'border-inline-end-color': makeTransform(transformBorder['border-inline-end']),\n\t\t\t'border-inline-end-style': makeTransform(transformBorder['border-inline-end']),\n\t\t\t'border-inline-end-width': makeTransform(transformBorder['border-inline-end']),\n\t\t\t'border-inline-start': makeTransformWithoutSplittingValues(transformBorder['border-inline-start']),\n\t\t\t'border-inline-start-color': makeTransform(transformBorder['border-inline-start']),\n\t\t\t'border-inline-start-style': makeTransform(transformBorder['border-inline-start']),\n\t\t\t'border-inline-start-width': makeTransform(transformBorder['border-inline-start']),\n\n\t\t\t// Flow-relative Corner Rounding\n\t\t\t'border-end-end-radius': makeTransform(transformBorderRadius),\n\t\t\t'border-end-start-radius': makeTransform(transformBorderRadius),\n\t\t\t'border-start-end-radius': makeTransform(transformBorderRadius),\n\t\t\t'border-start-start-radius': makeTransform(transformBorderRadius),\n\n\t\t\t// Four-Directional Shorthand Border Properties\n\t\t\t'border-color': makeTransform(transformDirectionalShorthands),\n\t\t\t'border-style': makeTransform(transformDirectionalShorthands),\n\t\t\t'border-width': makeTransform(transformDirectionalShorthands),\n\n\t\t\t// Transition helpers\n\t\t\t'transition': makeTransform(transformTransition),\n\t\t\t'transition-property': makeTransform(transformTransition)\n\t\t}\n\t};\n}\npostcssLogicalProperties.postcss = true;\n\nexport default postcssLogicalProperties;\n"],"names":["decl","dir","rule","Object","parent","type","cloneBefore","raws","removeAll","postcss","selector","assign","selectors","map","matchLogicalBorderSide","values","preserve","prop","replace","value","clean","ltrDecls","rtlDecls","clone","isLTR","length","cloneRuleSpecificity","append","cloneRule","ltrDecl","rtlDecl","remove","logicalRadii","ltrRadii","rtlRadii","lDecl","rDecl","$","prefix","direction","suffix","reducedValues","slice","pop","all","inline","blockEnd","inlineEnd","ltrValues","reduceValues","join","isFlowAgnostic","rtlValues","test","matchSide","matchInsetPrefix","cloneDeclBefore","matchSize","$0","minmax","flow","splitByComma","string","isTrimmed","splitByRegExp","splitBySpace","re","array","buffer","split","func","i","char","trim","push","notValues","forEach","hasBeenSplit","word","index","words","valueMap","ltr","replacement","splice","rtl","postcssLogicalProperties","opts","Boolean","makeTransform","transform","nodes","makeTransformWithoutSplittingValues","postcssPlugin","Declaration","transformFloat","transformResize","transformTextAlign","transformSize","transformDirectionalShorthands","transformSide","transformInset","transformBorder","transformBorderRadius","transformTransition"],"mappings":"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"}